<program> := (<top-level-declaration>)* EOF
<top-level-declaration>  := <context-declaration>
						 | <type-definition>
						 | <declaration>

<context-declaration> := 'context' '::' <context-block>
<type-definition>     := 'alias' <identifier> '::' <type-specifier> ';'
					  | ('struct' | 'union') (<identifier>)? '::' <composite-type-block>
					  | TODO: 'enum' (<identifier>) ? '::' <enumeration-block>
					  | 'fn' <identifier> '::' <lambda-definition>

<declaration>         := <identifier> <assignment-operator> <type-specifier> ';'

<assignment-operator> := ':' (<compiler-directive>)* (':' | '=')?
					  | '=' (<compiler-directive>)*
 
<context-block> := '{' (<declaration> | <compiler-directive>)* '}'

<composite-type-block> := '{' (<declaration>)+ '}'

<enumeration-block> := '{' <enumeration-list> '}'

<enumeration-list>  := <enum> (',' <enum>)*

<enum> := <identifier> (':' <numeric-literal>)?

<lambda-definition> := <argument-list> (<return-list>)? <lambda-block>

<argument-list> := '(' <arg> (',' <arg>)* ')'

<arg> := <identifier> (':' <type-specifier>)?

<return-list> := '->' <argument-list> 

<lambda-block> := '{' (<declaration> | <statement>)* '}'

<type-specifier>    := <identifier>
					 | <type-primitive>
					 | <lambda-definition>
					 | <literal>

<literal>  := <numeric-literal>
			| <string-literal>
			| TODO: <enum-literal>

<type-primitive>   := 'maybe'
					| 'none'
					| 'u8'
					| 'u16'
					| 'u32'
					| 'u64'
					| 's8'
					| 's16'
					| 's32'
					| 's64'
					| 'f32'
					| 'f64'
					| 'int'
					| 'float'
					| 'char'
					| 'string'
					| 'bool'
					| '[' (<constant-expression>)? ']' // array type
					| '*'	  // pointer type

<identifier> := [a-zA-Z]([(- | _)a-zA-Z0-9])*

<numeric-literal>  := <numeric-literal-decimal>
					| <numeric-literal-hexidecimal>
					| <numeric-literal-octal>
					| <numeric-literal-binary>

<numeric-literal-decimal>	  := [0-9']*(.)?[0-9']+
<numeric-literal-hexidecimal> := ('0h' | '0H')[0-9a-fA-F']+
<numeric-literal-octal>		  := ('0o' | '0O')[0-7']+
<numeric-literal-binary>	  := ('0b' | '0B')[0-1']+
// TODO: <statement>
// TODO: <compiler-directive>
