
header {
	entrypoint = main_fun;

	globals += var1, var2, var3, var4;  //globals contains all top level
										//declarations

	default_allocator = my_allocator;
}

var1 : s32;
var2 :: "Constant String";
var3 := var1;
var4 := fun1;
var5 : bool = true;

fun1 :: (a: u32, b: string) -> x: int, y: string, z: bool 
{
	// do some stuff
}

main_fun :: [var1, var2, var4] (argc: int, argv: []string) -> x: int, y: MyType
{
	print ("hello world", env.out);

	return 42, {var1, var2, var4};
}

MyType :: struct 
{
	val1: s32;
	val2: string;
	val3: (u32, string) -> int, string, bool;
}


alias state_machine :: struct {
	state: int;
	case0: (){////};
	case1: (bool, int) -> (u8, bool) {////};
	case2: ((string) -> (bool), int) -> none {////};
}

while (1) {
	local : int //static;
	switch (state_machine.state) {
		case 0: state_machine.case0();
		case 1: global.some, global.thing = state_machine.case1(var5, var5)
		case 2: state_machine.case2(print, var3);
	}
}
